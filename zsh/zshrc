echo "ZSH: interactive shell"

if [[ -o LOGIN ]]; then
	echo "ZSH: login shell"
	PROMPT="%m %# "
	xonsh && exit
	return
fi

FPATH+=":$HOME/.config/zsh/zfunc"
# Lines configured by zsh-newuser-install
HISTFILE=$HOME/.cache/zsh/histfile
HISTSIZE=900000
SAVEHIST=900000
#setopt appendhistory
setopt sharehistory
bindkey -e
# End of lines configured by zsh-newuser-install
# The following lines were added by compinstall

zstyle ':completion:*' completer _expand _complete _ignored _correct _approximate
zstyle ':completion:*' list-colors ''
zstyle ':completion:*' matcher-list '' 'm:{[:lower:]}={[:upper:]}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'
zstyle ':completion:*' match-original both
zstyle ':completion:*' max-errors 2
zstyle ':completion:*' menu select=1
zstyle ':completion:*' preserve-prefix '//[^/]##/'
zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
zstyle :compinstall filename '/home/qyriad/.zshrc'

autoload -Uz compinit
compinit
# End of lines added by compinstall

zstyle ':completion:*' rehash true

setopt AUTO_CONTINUE

autoload -Uz promptinit

promptinit

setopt PROMPT_SUBST

setopt cbases

setopt autopushd

# Use natural sort for *
setopt NUMERIC_GLOB_SORT

bindkey "^[[1;3D" backward-word # <A-<Left>>
bindkey "^[[1;3C" forward-word # <A-<Right>>
bindkey "^[[1~" beginning-of-line # <home>
bindkey "^[[4~" end-of-line # <end>
bindkey "^[[3~" delete-char # <del>
bindkey "<M-Del>" kill-word # <S-Del>

# prompt_toolkit style history search on <Up> but with <PageUp> instead

autoload -Uz history-search-end
zle -N history-beginning-search-backward-end history-search-end
zle -N history-beginning-search-forward-end history-search-end
bindkey '^[[5~' history-beginning-search-backward-end
bindkey '^[[6~' history-beginning-search-forward-end

# Allow editing the command in vim
autoload -Uz edit-command-line # Load the function from ZSH runtime 
zle -N edit-command-line # Expose the function as a widget
bindkey "" "edit-command-line" # Call the widget upon <C-X><C-E>

# This zle widget funcvtion cancels the current command, keeping the buffer,
# and moving to the next line, but without setting the error code
function enter-without-exec()
{
	# store our buffer, since we're about to delete it
	buf="${BUFFER}"
	zle kill-buffer
	# print it again, and move to the next line
	print "${buf}"
	_zsh_highlight
	# print the promptâ€”zsh won't do it for us since it doesn't see this as a new command buffer
	print -n -P "${PS1}"
}

# expose the function as a widget and bind it
zle -N enter-without-exec
bindkey "" enter-without-exec

# zle widget function for bash-style word kill
function bash-backward-kill-word()
{
	#local WORDCHARS="${WORDCHARS:s/\///}"
	local WORDCHARS="${WORDCHARS//[^[:alnum:]]/}"
	zle backward-kill-word
}

# expose the function as a widget and bind it
zle -N bash-backward-kill-word
# ^[08 is <C-<BS>>, which I bound in Alacritty's config
bindkey '^[08' bash-backward-kill-word

# zle widget function for bash-style word movement left
function bash-backward-word()
{
	local WORDCHARS="${WORDCHARS//[^[:alnum:]]/}"
	zle backward-word
}

# expose the function as a widget and bind it
zle -N bash-backward-word
# Alacritty default for <C-<Left>>
bindkey '^[[1;5D' bash-backward-word

# zle widget function for bash-style word-movement right
function bash-forward-word()
{
	local WORDCHARS="${WORDCHARS//[^[:alnum:]]/}"
	zle forward-word
}

# expose the function as a widget and bind it
zle -N bash-forward-word
# Alacritty default for <C-<Right>>
bindkey '^[[1;5C' bash-forward-word

# Add shortcut for pushing the line onto the stack
bindkey "" "push-input"

# <Esc>ia for select-in-shell-word
bindkey 'ia' select-in-shell-word

# <Esc>v for toggle visual mode
bindkey 'v' visual-mode

# <Esc>u for undo
bindkey 'u' undo

# completion help
bindkey '' _complete_help


#export PATH="$HOME/.local/bin:/usr/local/bin:$HOME/.local/share/cargo/bin:$PATH"

# Use neovim for everything
export EDITOR="$(which nvim)"
export VISUAL="$(which nvim)"
export SYSTEMD_EDITOR="$(which nvim)"
export NETCTL_EDITOR="$(which nvim)"

# Make stuff follow XDG
export XDG_DATA_HOME="$HOME/.local/share"
export XDG_CACHE_HOME="$HOME/.cache"
export XDG_CONFIG_HOME="$HOME/.config"
export XDG_RUNTIME_DIR="/run/user/$(id -u)"
export CARGO_HOME="$XDG_DATA_HOME"/cargo
#export GNUPGHOME="$XDG_CONFIG_HOME"/gnupg
export LESSHISTFILE="$XDG_CACHE_HOME"/less/history
export LESSKEY="$XDG_CONFIG_HOME"/less/lesskey
export TMUX_TMPDIR="$XDG_RUNTIME_DIR"
#export VIMINIT=':let $MYVIMRC="$XDG_CONFIG_HOME/vim/vimrc" | source $MYVIMRC'
alias tmux="tmux -u -f $XDG_CONFIG_HOME/tmux/tmux.conf"
export XCOMPOSEFILE="$XDG_CONFIG_HOME/X11/Xcompose"

alias cmc="rm -rf CMakeCache.txt CMakeFiles Makefile cmake_install.cmake"
alias ec="vim CMakeLists.txt"

export PAGER="less"

# Coreutils and builtins
alias lls='command ls --color=always'
alias ls='exa -ghbF --group-directories-first'
alias ll="ls -lh"
alias la="ls -Al"
alias cp="cp -vi"
alias rm="rm -vi"
alias mv="mv -vi"
alias ln="ln -vi"
alias mkdir="mkdir -vp"
alias chown="chown -v --preserve-root"
alias chmod="chmod -v --preserve-root"
alias chgrp="chgrp -v --preserve-root"
alias grep="grep --color=auto"
alias egrep='egrep --color=auto'
alias less="less -R"

# Edit config shortucts
alias et="$EDITOR $HOME/.config/tmux/tmux.conf"
alias ev="$EDITOR $HOME/.config/nvim/init.vim"
alias ei3="$EDITOR $HOME/.config/i3/config"
alias eb="$EDITOR $HOME/.config/bash/bashrc"
alias ex="$EDITOR $HOME/.xinitrc"
alias exr="$EDITOR $HOME/.config/X11/Xresources"
alias ei="$EDITOR $HOME/.config/i3/config"
alias er="$EDITOR $HOME/.config/ranger/rc.conf"
alias ea="$EDITOR $HOME/.config/alacritty/alacritty.yml"
alias ef="$EDITOR $HOME/.config/fontconfig/fonts.conf"
alias ez="$EDITOR $HOME/.config/zsh/zshrc"
alias sz="source $HOME/.zshrc"
alias exz='exec zsh'
alias es="$EDITOR $HOME/.ssh/config"
alias ek="$EDITOR $HOME/.config/kitty/kitty.conf"
alias etr="$EDITOR $HOME/.config/termite/config"

# Color output
alias df='grc df'
alias free='grc free'
alias ifconfig='grc ifconfig'
alias ip='grc ip'
alias mount='grc mount'
alias netstat='grc netstat'
alias ping='grc ping'
alias as='grc as'
alias last='grc last'
alias lsusb='grc lsusb'
alias lspci='grc lspci -nn'

# Forced color output (for piping).
alias grcc='grc --colour=on'
alias grepc='grep --color=always'
alias egrepc='egrep --color=always'
alias jqc='jq --color-output'
alias watchc='watch --color'
alias rgc='rg --smart-case --color=always --heading --line-number' # --smart-case is part of the normal alias
alias fdc='fd --color=always'

# fd and rg no ignore
# use -E, --exclude for globbing
alias fdi='fd --no-ignore'
alias fdih='fd --no-ignore --hidden'
# use -g, --glob for globbing (! negates)
alias rg='rg --smart-case'
alias rgi='rg --no-ignore'
alias rgih='rg --no-ignore --hidden'

# Misc
alias wgetc="wget --content-disposition" # Uses server filename across redirects
alias ni="nonet"
alias info="pinfo"
alias sudoe="sudo -E" # I shouldn't always, but sometimes it's really nice to preserve env when editing
alias sudos="sudo -Es"
alias gpc='gpaste-client'
alias xdgo='xdg-open'
alias ffprobe="ffprobe -hide_banner"
alias ffmpeg='ffmpeg -hide_banner'
alias mpv='mpv --osd-fractions'
alias diskus='diskus --size-format binary'
alias prp='realpath .' # "Print real path"
alias tn="tr -d '\n'" # Strip newlines, meant to be used when copying one line of command output to clipboard
alias remake='mkdir $(pwd) ; cd $(pwd)'
alias svim="sudo -E nvim"
alias visudo='sudo -E visudo'
alias vipw='sudo -E vipw'
alias vigr='sudo -E vigr'
alias vrt='nvr --remote-silent -sp' # Vim Remote Tab
alias xxpreview='xxd -l 512'
alias rsync='systemd-inhibit --mode=block --what=shutdown:sleep:idle --who=qyriad --why=rsync --no-pager --no-legend rsync --recursive -hhh --links -v --info=PROGRESS2'
alias rsyncn='/usr/bin/rsync --recursive -hhh --links -v --info=PROGRESS2'
alias lsync='systemd-inhibit --mode=block --what=shutdown:sleep:idle --who=qyriad --why=rsync --no-pager --no-legend rsync --whole-file --recursive -hhh --links -v --info=PROGRESS2'
alias lsyncn='/usr/bin/rsync -rvhhh --links --checksum --whole-file --info=progress2'
alias rclone='rclone -P'
alias pgrep='pgrep --list-full --ignore-case'
alias ppid='ps -o ppid= -p' # Get parent pid of process specified by pid.
alias what='whence -savf' # show symlinks too
#alias built-in-man='vim "+tab Man zshall | normal
alias lv='ls *.(mp4|mkv)' # list videos
alias lsdsk='lsblk -o NAME,FSTYPE,LABEL,TYPE,MOUNTPOINT,SIZE'
alias lsd='lsblk -o NAME,FSTYPE,SIZE,MOUNTPOINT,LABEL,PARTLABEL,PARTTYPE'
alias ipy='ipython'
alias wine32="WINEPREFIX=$HOME/.wine32 WINEARCH=win32 wine"
alias winetricks32="WINEPREFIX=$HOME/.wine32 WINEARCH=win32 winetricks"
alias ddf='pydf'
alias userctl='systemctl --user'
alias sudo='sudo '
alias ins='insect'
alias time='command time -f "%U user %S system %E elapsed %P% CPU"'
alias cargo-install='RUSTFLAGS="-C target-cpu=native" cargo install'
alias progress='progress -a atool -a aunpack -a apack -a unzip'
alias pm='progress -a atool -a aunpack -a apack -a unzip -M'
alias qmount='mount -o uid=$(id -u)'
#alias inhibit='systemd-inhibit --what=shutdown:sleep:idle:handle-power-key:handle-suspend-key:handle-hibernate-key:handle-lid-switch --mode=block'
alias inhibit='gnome-session-inhibit --inhibit logout:suspend:idle --reason "manually inhibited"'
alias htopshort="HTOPRC=$HOME/.config/htop/alt.htoprc htop"
#alias cmplinux='delta <(uname -r) <(basename "/usr/lib/modules/"*arch1*) | tail -2'
#alias cmplinux='uname -r ; basename "/usr/lib/modules/"*arch1*'

function cmplinux()
{
	boot=$(uname -r)
	installed=$(basename "/usr/lib/modules/"*arch1*)
	if [[ $boot != $installed ]]; then
		delta <(echo $boot) <(echo $installed) | tail -2
	else
		echo $boot ; echo $installed
	fi
}

function mkcd()
{
	mkdir -vp "$1"
	cd "$1"
}

function appfd()
{
	fd "$1" /usr/share/applications ~/.local/share/applications
}

function apprg()
{
	rg "$1" /usr/share/applications ~/.local/share/applications
}

function tmuxman()
{
	man tmux | vim "+set ft=man | normal /\v^\s+$1 (\[|-)"
}

function vimman()
{
	man $1 | vim "+set ft=man"
}

function zshman()
{
	man zshall | vim "+set ft=man | normal /\v^\s+$1 (\[|-)"
}

function bak()
{
	if [ -e "$1" ]; then
		mv "$1" "$1.bak"
	else
		echo "File \"$1\" not found"
	fi
}

function unbak()
{
	if [ -e "$1" ]; then
		mv "$1" "${1%.bak}" # Strip trailing .bak
	elif [ -e "$1.bak" ]; then
		mv "$1.bak" "$1"
	else
		echo "File \"$1\" not found"
	fi
}

function vienv()
{
	to="$(mktemp)"
	tm="$(mktemp)"
	e=$(env)
	echo "$e" > "$to"
	echo "$e" > "$tm"


	"$EDITOR" "$tm"

	# unset comm -23
	# set comm -13

	for i in $(comm -23 <(sort "$to") <(sort "$tm")); do
		a=(${(s/=/)i})
		name=${a[1]}

		unset $name
	done

	for i in $(comm -13 <(sort "$to") <(sort "$tm")); do
		a=(${(s/=/)i})
		name=${a[1]}
		val=${a[2]}

		export "$name"="$val"
	done

	/usr/bin/rm "$to"
	/usr/bin/rm "$tm"
}

function rekey()
{
	export GPG_TTY="$(tty)"
	export SSH_AUTH_SOCK="$(gpgconf --list-dirs agent-ssh-socket)"
	gpg-connect-agent updatestartuptty reloadagent /bye > /dev/null
}

function reenv()
{
	tmux show-environment -s | rg -v unset
	eval $(tmux show-environment -s | rg -v unset)
}

function ftail()
{
	tail -f "$1" 2>&1 | perl -ne "if (/file truncated/) {system "clear'} else {print}'
}

function bwsearch()
{
	bw list items --search "$1" | jq '[.[] | {id: .id, name: .name, username: .login.username, url: .login.uris[].uri}]'
}

# copyfrom [hostname]
function copyfrom()
{
	ssh "$1" tmux show-buffer | wl-copy
}
alias cfy='copyfrom yuki'

function bwgetpw()
{
	bw get password "$1"
}

function bwcppw()
{
	bw get password "$1" | tr -d '\n' | gpaste-client
}

function source_if()
{
	[ -r "$1" ] && source "$1"
}

function do_echo()
{
	echo "+$@"
	$@
}

source_if /usr/share/git/completion/git-prompt.sh
autoload -Uz vcs_info

#zstyle ':vcs:info:*' disable bzr cdv darcs mtn svk tla darcs fossil mtn p4
zstyle ':vcs_info:*' enable git cvs svn hg

precmd()
{
	vcs_info
}

zstyle ':vcs_info:git*' formats '%F{116}(%b)'
zstyle ':vcs_info:git*' actionformats '%F{116}(%b|%a|%m)'

export PROMPT='%F{2}%n@%m %F{129}%~${vcs_info_msg_0_:+ ${vcs_info_msg_0_}} %(0?..%(130?..%F{1}[%?] ))%F{2}%(! # $) %f'

# FIXME: this is super slow, so we'll use bash's instead
#zstyle ':completion:*:*:git:*' script /usr/share/git/completion/git-completion.zsh
autoload -Uz bashcompinit
bashcompinit
source_if /usr/share/git/completion/git-completion.bash 2> /dev/null

#source_if /usr/share/git/completion/git-completion.zsh
source_if /usr/share/git/completion/git-prompt.sh
#source_if /etc/profile.d/cnf.sh
source_if /etc/profile.d/devkitarm.sh
source_if /etc/profile.d/devkitppc.sh



source_if /usr/share/zsh/scripts/zplug/init.zsh
source_if /usr/share/zplug/init.zsh # Debian/Ubuntu location.
source_if /usr/local/opt/zplug/init.zsh # Homebrew location.

if whence zplug; then

	#zplug "lambda/zsh-snippets"
	#zplug "ael-code/zsh-colored-man-pages"
	#zplug "agkozak/zsh-z"

	#export X_ZSH_HIGHLIGHT_DIRS_BLACKLIST=('/media/*/*')
	typeset -Ag FAST_HIGHLIGHT
	FAST_HIGHLIGHT[use_async]=1
	zplug zdharma/fast-syntax-highlighting

	zplug zsh-users/zsh-autosuggestions

	zplug bigH/git-fuzzy
	zplug wfxr/forgit

	zplug load
fi

#alias zsp='zsh_snippets'
#bindkey "<M-s>" zsh-snippets-widget-expand

# willinghatch/zsh-snippets
# momo-lab/zsh-abbrev-alias

source_if $HOME/.local/bin/zsh_automatic_cd.zsh && bindkey -s '^O' '^Uranger^M' && alias ranger='ranger-cd'

unalias run-help 2>/dev/null
autoload -Uz run-help

# udevadm custom completion extension
_udevadm 2> /dev/null
functions[_udevadm-orig]=$functions[_udevadm_info]
_udevadm_info()
{
	_udevadm-orig "$@"
    _arguments \
	'*: :_files'
}

compdef _gf gf
compdef _gf greatfet


# Source host-specific zshrc if there is Source host-specific zshrc if there is one
h=$(hostname -s) # get hostname
h=${(L)h} # convert to lowercase
source_if "$HOME/.config/host/$h/zsh/zshrc"
