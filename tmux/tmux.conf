# Server options.
set-option -s extended-keys on
set-option -s extended-keys-format csi-u
set-option -s exit-empty off
set-option -s escape-time 0
set-option -s focus-events on
set-option -s set-clipboard on

# Session options.
# Start windows and panes at 1 instead of 0.
set-option -g base-index 1

# Window options.
#set-option -g monitor-activity on
set-option -g pane-base-index 1
set-option -g allow-passthrough on

unbind-key C-b
set-option -g prefix `
bind-key ` send-prefix
set-option -g mouse on
# Start windows and panes at 1 instead of 0
set-option -g base-index 1
set-option -g pane-base-index 1
bind-key 0 select-window -t :=10
set-option -g status-left-length 40
set-option -g status-right-length 60
set-option -g history-limit 9000
set-option -g mode-keys vi
set-option -g set-titles on
set-option -g set-titles-string '#{host_short} #{session_name}:#{window_index}:#{window_name}: #{pane_title}'

set-option -g update-environment "XDG_RUNTIME_DIR SESSION_MANAGER DESKTOP_SESSION DBUS_SESSION_BUS_ADDRESS GDMSESSION GDM_LANG GDM_LANG INVOCATION_ID JOURNAL_STREAM XAUTHORITY SWAYSOCK SSH_AUTH_SOCK XDG_CONFIG_HOME XDG_CACHE_HOME XDG_DATA_HOME XDG_RUNTIME_DIR PATH NIX_PATH WAYLAND_DISPLAY DISPLAY"

set-option -g default-command xonsh

# Unbind some defaults we don't care about.
# Power crept by `bind-key '=' choose-buffer`.
unbind-key '#' # list-buffers
unbind-key "&" # confirm-before -p "kill-window # W? (y/n)" kill-window
unbind-key "'" # command-prompt -T window-target -p index { select-window -t ":%%" }
unbind-key "/" # command-prompt -k -p key { list-keys -1N "%%" }
#unbind-key "D" # choose-client -Z
unbind-key "f" # command-prompt { find-window -Z "%%" }
unbind-key "t" # clock-mode
unbind-key "C-z" # suspend-client

# Use vim keys to select pane
unbind-key Left
unbind-key Right
unbind-key Up
unbind-key Down
bind-key h select-pane -L
bind-key j select-pane -D
bind-key k select-pane -U
bind-key l select-pane -R
bind-key - select-window -l
bind-key -T root M-1 send-prefix

# Make $ go to the last character, not past the last character, in copy mode.
bind-key -T copy-mode-vi '$' {
	send-keys -X end-of-line
	send-keys -X cursor-left
}
bind-key R {
	source-file ~/.config/tmux/tmux.conf
	display-message "Configuration reloaded"
}

set-option -g @command-prompt-cmd {
	set-option -g status 2
	# This will flicker slightly, but give running programs enough time to process
	# before opening the actual command prompt.
	run-shell -d 0.01 ""
	command-prompt
	set-option -g status on
}

bind-key ";" run-shell -C "#{@command-prompt-cmd}"
# Have true colon use the normal command prompt, in case the resizing *really*
# messes up the running program.
bind-key ":" command-prompt

bind-key s choose-tree -s -Z -O name

unbind-key '"'
bind-key '"' split-window -v -c "#{pane_current_path}"
unbind-key %
bind-key % split-window -h -c "#{pane_current_path}"

bind-key c new-window -c "#{pane_current_path}"
# <prefix>N to create a new window after the current one, and renumber as needed.
bind-key -T prefix N new-window -t +1 -a -c "#{pane_current_path}"

# Emulate Vim's "select inside" motions.
bind-key -T copy-mode-vi i command-prompt -1 -p "(select inside)" {
	send-keys -X jump-backward "%%"
	send-keys -X cursor-right
	send-keys -X begin-selection
	send-keys -X jump-to-forward "%%"
}

bind-key -T prefix v copy-mode

bind-key -T copy-mode-vi "[" send-keys -X previous-prompt
bind-key -T copy-mode-vi "]" send-keys -X next-prompt

# Copy the terminal of the current pane, for purposes of `pgrep -t`.
bind-key "T" {
	run-shell "echo -n #{s/.dev.//:pane_tty} | tmux load-buffer -w -"
}

# Make the default <prefix>q "display panes" thing display for 2.5 seconds.
# It can always be cancelled early with `q`.
set-option -g display-panes-time 2500

bind-key -T copy-mode-vi Enter send-keys -X copy-selection
bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-selection
bind-key -T copy-mode-vi MouseDown2Pane send-keys -X copy-selection
bind-key -T copy-mode-vi MouseDown3Pane send-keys -X cancel

bind-key -T copy-mode-vi + display-message -d 1500 "#{l:-S} -#{scroll_position} -E #{e|-:#{e|-:#{pane_height},#{scroll_position}},1}"
# Copy the current viewport with escape codes. This is surprisingly hard...
# #{scroll_position} is where we want to start the copy, but the end is more complex.
# `e|-:` is the mathematical subtraction modifier. I need to subtract the scroll position from the pane height
# and then additionally subtract 1 for the off-by-one.
# I THOUGHT I could get this to look a little nicer with tmux's { } quoting syntax, but I couldn't get it to work.
bind-key -T copy-mode-vi * run-shell 'tmux capture-pane -p -e -S -#{scroll_position} -E #{e|-:#{e|-:#{pane_height},#{scroll_position}},1} | tmux load-buffer -w -'

# Jump to beginning of last command.
bind-key @ "copy-mode ; send-keys -X search-backward ^qyriad@ ; send-keys -X search-backward ; send-keys Escape ; send-keys -X end-of-line"

# Send {HUP, TERM, KILL} to current process.
# #{pane_pid} gets the top-level process in the pane, which is usually the shell.
# So I wrote a script to find the process running the current command and kill it.
bind-key C-h run-shell "sig-pane HUP  #{pane_pid} '#{pane_current_command}'"
bind-key C-t run-shell "sig-pane TERM #{pane_pid} '#{pane_current_command}'"
bind-key C-k run-shell "sig-pane KILL #{pane_pid} '#{pane_current_command}'"

# Tell tmux we have 256 colors
set -g default-terminal "tmux-256color"
set -g default-command xonsh

# If the terminal starting tmux reports true color, add that to its list of supported features.
%if "#{==:$COLORTERM,truecolor}"
set-option -ga terminal-features $TERM:RGB
%endif

# Speaking of color, I had to change my terminal's ASCII black to be not-black (since background was also black) sooooâ€¦
set-option -g status-style fg='#000000',bg='green'

set-option -g @default-status-right "#{?window_bigger,[#{window_offset_x}#,#{window_offset_y}] ,}\"#{=21:pane_title}\" %H:%M %d-%b-%y"
#set-option -g @default-status-right "#{status-right}"
set-option -gF status-right '##{tmux_mode_indicator} ##{pane_tty} #{@default-status-right}'


#set-option -g status-right '#(cat /proc/#(pgrep -P #(pgrep -P #{pane_pid}) || pgrep -P #{pane_pid} || echo #{pane_pid})/cmdline | tr "\0" " ")'
#set-option -g status-interval 1
#set-option -g status-right-length 120


# Copy previous line.
#bind-key Y 'copy-mode ; send-keys "k^ \$h" ; send-keys -X copy-selection-and-cancel ; display-message "copied!"'
bind-key Y {
	copy-mode
	send-keys "k^ \$h"
	send-keys -X copy-selection-and-cancel
	display-message "copied!"
}

set -s command-alias[0] rewin='move-window -r'
# in case a command freezes or something
set -s command-alias[1] restart='respawn-pane -k $SHELL'
#set -s command-alias[2] relayout='select-layout -t 1.1 1e9e,239x55,0,0{119x55,0,0[119x19,0,0,0,119x5,0,20,13,119x29,0,26,14],119x55,120,0,12}'
set -s command-alias[2] relayout='select-layout -t 1.1 6c4c,239x55,0,0{104x55,0,0[104x19,0,0,33,104x5,0,20,41,104x29,0,26,42],134x55,105,0,40}'
set -s command-alias[3] relay='select-layout -t 1.1 1ebf,239x55,0,0{104x55,0,0[104x19,0,0,0,104x5,0,20,2,104x29,0,26,3],134x55,105,0[134x27,105,0,1,134x27,105,28,16]}'
set -s command-alias[4] lw='link-window -s 0:1 -t 1'

bind-key -T copy-mode-vi a {
	# capture-pane with escape codes, starting at (selection_start_y - history_size), and
	# ending at (selection_end_y - history_size).
	# It's weird that it's selection_y - history and not the other way around, but whatever.
	capture-pane -b ansi_capture -e -S "#{e|-|:#{selection_start_y},#{history_size}}" -E "#{e|-|:#{selection_end_y},#{history_size}}"
	send-keys -X clear-selection
	run-shell "tmux save-buffer -b ansi_capture - | tmux load-buffer -w -"
}
# Because tmux, it is easier to define a command in terms of a binding than the other way around.
set-option -s command-alias[6] copy-ansi="send-keys -a"


tmux_commands_with_legacy_scroll="nano less more man git vim neovim nvim journalctl"

bind-key -T root WheelUpPane \
	if-shell -Ft= '#{?mouse_any_flag,1,#{pane_in_mode}}' \
		'send -Mt=' \
		'if-shell -t= "#{?alternate_on,true,false} || echo \"#{tmux_commands_with_legacy_scroll}\" | grep -q \"#{pane_current_command}\"" \
			"send -t= Up" "copy-mode -et="'

bind-key -T root WheelDownPane \
	if-shell -Ft = '#{?pane_in_mode,1,#{mouse_any_flag}}' \
		'send -Mt=' \
		'if-shell -t= "#{?alternate_on,true,false} || echo \"#{tmux_commands_with_legacy_scroll}\" | grep -q \"#{pane_current_command}\"" \
			"send -t= Down" "send -Mt="'

bind-key -n TripleClick1Pane {
	copy-mode -M
	send-keys -X select-word
}

#set -g @plugin 'tmux-plugins/tpm'
##set -g @plugin 'RTBHOUSE/tmux-picker'
#set -g @plugin 'MunifTanjim/tmux-mode-indicator'
#set -g @plugin 'MunifTanjim/tmux-suspend'
#set -g @plugin 'fcsonline/tmux-thumbs'
#
#set -g @scroll-speed-num-lines-per-scroll 2
#set -g @emulate-scroll-for-no-mouse-alternate-buffer "on"
#run '~/.tmux/plugins/tpm/tpm'
