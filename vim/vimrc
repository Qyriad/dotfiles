" vim:syntax=vim:textwidth=0
set nocompatible

" Set runtime directories and stuff
set directory=$XDG_CACHE_HOME/vim/swap
set backupdir=$XDG_CACHE_HOME/vim/backup
set undodir=$XDG_CACHE_HOME/vim/undo
if !has('nvim')
	set viminfo+='1000,n$XDG_CACHE_HOME/viminfo
else
	set viminfo+='1000,n$XDG_CACHE_HOME/nviminfo
endif

" Put netrwhist in XDG_CACHE_HOME
let g:netrw_home=$XDG_CACHE_HOME.'/vim'

set runtimepath=$XDG_CONFIG_HOME/vim,$VIMRUNTIME,/usr/share/vim/vimfiles,$XDG_CONFIG_HOME/vim/after/

" Allow cursor change in tmux
if exists('$TMUX')
	let &t_SI = "\<Esc>Ptmux;\<Esc>\e[5 q\<Esc>\\"
	let &t_EI = "\<Esc>Ptmux;\<Esc>\e[2 q\<Esc>\\"
else
	let &t_SI = "\e[5 q"
	let &t_EI = "\e[2 q"
endif

" Vundle stuff
filetype off
set runtimepath+=~/.config/vim/bundle/Vundle.vim
call vundle#begin('~/.config/vim/plugins')
Plugin 'VundleVim/Vundle.vim'
Plugin 'itchyny/lightline.vim'
Plugin 'chrisbra/colorizer'
Plugin 'Alvarocz/vim-fresh'
call vundle#end()
" /Vundle stuff

syntax on
filetype plugin indent on

set number " Show line numbers
set relativenumber " Make line numbers relative (except the current one)
set modeline " Allow vim meta commands in text files
set undofile " Persistent undo tree
set incsearch " Incremental search
set hlsearch " Highlight all matches of a search not just the current one
set tabstop=4 " Number of visual spaces to be displayed per HT
set noexpandtab " Don't 'expand' tabs to spaces
set shiftwidth=0 " Use tabstop value for indenting
set showcmd " Show the last command in the bottom bar
set lazyredraw " Only redraw when we need to
set scrolloff=12 " Keep 12 lines between the end of the buffer and the cursor
set mouse=n " Enable the mouse in normal mode
set colorcolumn=120 " It's typically good to keep lines of code under 120 characters
set wildmenu " Autocomplete command menu
set cursorcolumn " Highlight the column the cursor is on
set cursorline " Highlight the line the cursor is on
set timeoutlen=1000 ttimeoutlen=10 " Remove <Esc> leaving insert mode delay
set noshowmode " We're using Airline, so showing mode like this is redundant
set splitright " Make :vsplit put the new window on the right, not the left
set splitbelow " Same as above, but on the bottom with horizontal splits

" Only highlight the cursor postiion in the current window
augroup cursorpos_currentwin
	autocmd! WinLeave * set nocursorline nocursorcolumn
	autocmd! WinEnter * set cursorline cursorcolumn
augroup END

function! Togglenumber() " Toggle relativenumbers for all filetypes except 'help'
	if &ft=~ 'help'
		return
	endif
	set relativenumber!
endfun

augroup numbertoggle
	autocmd!
	autocmd BufEnter,FocusGained,InsertLeave * call Togglenumber()
	autocmd BufLeave,FocusLost,InsertEnter * call Togglenumber()
augroup END

nnoremap <F3> :set number! relativenumber!<CR>

augroup gitrebase
	autocmd! FileType gitrebase echomsg "Git Rebase filetype"
augroup END

" Make the highlight color for the colorcolumn not obnoxious, but still stand out
highlight ColorColumn ctermbg=236
" Make the highlight color for the current column not obnoxious, and stand out a bit less than above
highlight CursorColumn ctermbg=234
" Make the highlight color for the current row not obnoxious and not underlined
highlight CursorLine ctermbg=234 cterm=NONE
" Also bold the line number
highlight CursorLineNr cterm=bold

let mapleader="\\"

" Stop highling last search with \/
nnoremap <leader>/ :nohlsearch<CR> | let @/=""

" Edit and source vimrc shortcus
nnoremap <leader>ev :tabedit $MYVIMRC<CR>
nnoremap <leader>sv :source $MYVIMRC<CR>

" Save my pinky
nnoremap ; :

" New verb! X: delete to black hole (null) register
nnoremap X "_d
nnoremap XX "_dd

" Have the indent commands re-highlight the last visual selection
vnoremap > >gv
vnoremap < <gv

nnoremap <F1> :vertical help<CR>

" gp: select pasted text
nnoremap gp `[v`]

" Unmap Q
nnoremap Q <nop>

" I am fucking proud of this
" Explanation: Go to the beginning of the line, delete it, insert the result of:
" 	Take the comment string template, replace %s with the contents of the line that just got deleted, return to normal
" 	mode
nnoremap <leader>co ^Di<C-R>=substitute(&commentstring, "%s", ' ' . @", "")<CR><Esc>

" Yank from default register to gpaste clipboard
" Explantion: Run system command: `gpaste-client add`, send the @" register to stdin minus the last character
nnoremap <leader>Y :call system("gpaste-client add", strpart(@", 0, strlen(@") - 1))<CR>

" Yes, I use tabs instead of spaces. Shoot me.
let g:python_recommended_style=0

set laststatus=2 " Always show statusline
" left_sep: 
" right_sep: 
" lock: 
let g:lightline =
\{
	\	'active': { 'left': [['mode', 'paste'], ['readonly', 'filename', 'modified']] },
	\	'separator': { 'left': "\ue0b0", 'right': "\ue0b2" },
\}
