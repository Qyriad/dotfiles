"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const child_process_1 = require("child_process");
const path_1 = tslib_1.__importDefault(require("path"));
const coc_nvim_1 = require("coc.nvim");
const find_up_1 = tslib_1.__importDefault(require("find-up"));
const vscode_uri_1 = tslib_1.__importDefault(require("vscode-uri"));
function runCommand(cmd, cwd, timeout) {
    return new Promise((resolve, reject) => {
        let timer;
        if (timeout) {
            timer = setTimeout(() => {
                reject(new Error(`timeout after ${timeout}s`));
            }, timeout * 1000);
        }
        child_process_1.exec(cmd, { cwd }, (err, stdout) => {
            if (timer)
                clearTimeout(timer);
            if (err) {
                reject(new Error(`exited with ${err.code}`));
                return;
            }
            resolve(stdout);
        });
    });
}
exports.runCommand = runCommand;
function getManager(uri) {
    let dir = path_1.default.dirname(vscode_uri_1.default.parse(uri).fsPath);
    let res = find_up_1.default.sync(['yarn.lock', 'package-lock.json'], { cwd: dir });
    if (!res)
        return 'yarn';
    return res.endsWith('yarn.lock') ? 'yarn' : 'npm';
}
function getRoot(uri) {
    let dir = path_1.default.dirname(vscode_uri_1.default.parse(uri).fsPath);
    let res = find_up_1.default.sync(['package.json'], { cwd: dir });
    if (!res)
        return dir;
    return path_1.default.dirname(res);
}
function moduleExists(name) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        try {
            let content = yield runCommand(`npm info ${name} --json`, process.cwd());
            if (!content)
                return false;
            let obj = JSON.parse(content);
            if (obj.error != null)
                return false;
            return true;
        }
        catch (e) {
            return false;
        }
        return false;
    });
}
exports.moduleExists = moduleExists;
/**
 * Removes duplicates from the given array. The optional keyFn allows to specify
 * how elements are checked for equalness by returning a unique string for each.
 */
function distinct(array, keyFn) {
    if (!keyFn) {
        return array.filter((element, position) => {
            return array.indexOf(element) === position;
        });
    }
    const seen = Object.create(null);
    return array.filter(elem => {
        const key = keyFn(elem);
        if (seen[key]) {
            return false;
        }
        seen[key] = true;
        return true;
    });
}
exports.distinct = distinct;
function installModules(uri, names) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        names = distinct(names);
        let root = getRoot(uri);
        let arr = names.concat(names.map(s => `@types/${s}`));
        let statusItem = coc_nvim_1.workspace.createStatusBarItem(99, { progress: true });
        statusItem.text = `Checking module ${arr.join(' ')}`;
        statusItem.show();
        let exists = yield Promise.all(arr.map(name => {
            return moduleExists(name).then(exists => {
                return exists ? name : null;
            });
        }));
        let manager = getManager(uri);
        exists = exists.filter(s => s != null);
        if (!exists.length)
            return;
        let devs = exists.filter(s => s.startsWith('@types'));
        let deps = exists.filter(s => devs.indexOf(s) == -1);
        statusItem.text = `Installing ${exists.join(' ')}`;
        try {
            yield Promise.all([deps, devs].map((names, i) => {
                let cmd = manager == 'npm' ? `npm i ${names.join(' ')}` : `yarn add ${names.join(' ')} --ignore-scripts --no-default-rc`;
                if (i == 1)
                    cmd = cmd + ' --dev';
                return runCommand(cmd, root);
            }));
        }
        catch (e) {
            statusItem.dispose();
            coc_nvim_1.workspace.showMessage(`Install error ${e.message}`, 'error');
            return;
        }
        statusItem.dispose();
        coc_nvim_1.workspace.showMessage(`Installed: ${exists.join(' ')}`, 'more');
    });
}
exports.installModules = installModules;
//# sourceMappingURL=modules.js.map