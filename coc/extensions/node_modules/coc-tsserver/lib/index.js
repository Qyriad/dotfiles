"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const coc_nvim_1 = require("coc.nvim");
const server_1 = tslib_1.__importDefault(require("./server"));
const commands_1 = require("./server/commands");
const organizeImports_1 = tslib_1.__importDefault(require("./server/organizeImports"));
const plugins_1 = require("./utils/plugins");
function activate(context) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        let { subscriptions } = context;
        const config = coc_nvim_1.workspace.getConfiguration().get('tsserver', {});
        if (!config.enable)
            return;
        const pluginManager = new plugins_1.PluginManager();
        const service = new server_1.default(pluginManager);
        subscriptions.push(coc_nvim_1.services.regist(service));
        yield service.start();
        function registCommand(cmd) {
            let { id, execute } = cmd;
            subscriptions.push(coc_nvim_1.commands.registerCommand(id, execute, cmd));
        }
        registCommand(new commands_1.AutoFixCommand(service.clientHost));
        registCommand(new commands_1.ReloadProjectsCommand(service.clientHost));
        registCommand(new commands_1.OpenTsServerLogCommand(service.clientHost));
        registCommand(new commands_1.TypeScriptGoToProjectConfigCommand(service.clientHost));
        registCommand(new organizeImports_1.default(service.clientHost));
        registCommand(new commands_1.ConfigurePluginCommand(pluginManager));
        registCommand(coc_nvim_1.commands.register({
            id: 'tsserver.restart',
            execute: () => {
                // tslint:disable-next-line:no-floating-promises
                service.stop().then(() => {
                    setTimeout(() => {
                        service.restart();
                    }, 100);
                });
            }
        }));
        return {
            configurePlugin: (pluginId, configuration) => {
                pluginManager.setConfiguration(pluginId, configuration);
            }
        };
    });
}
exports.activate = activate;
//# sourceMappingURL=index.js.map