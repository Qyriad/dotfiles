import { Disposable } from 'vscode-languageserver-protocol';
export interface TypeScriptServerPlugin {
    readonly path: string;
    readonly name: string;
    readonly enableForWorkspaceTypeScriptVersions: boolean;
    readonly languages: ReadonlyArray<string>;
}
export declare class PluginManager implements Disposable {
    private readonly _pluginConfigurations;
    private _disposables;
    private _plugins;
    constructor();
    dispose(): void;
    readonly plugins: ReadonlyArray<TypeScriptServerPlugin>;
    _register<T extends Disposable>(value: T): T;
    private readonly _onDidUpdatePlugins;
    readonly onDidChangePlugins: import("vscode-languageserver-protocol").Event<this>;
    private readonly _onDidUpdateConfig;
    readonly onDidUpdateConfig: import("vscode-languageserver-protocol").Event<{
        pluginId: string;
        config: {};
    }>;
    setConfiguration(pluginId: string, config: {}): void;
    configurations(): IterableIterator<[string, {}]>;
    private readPlugins;
}
