"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const coc_nvim_1 = require("coc.nvim");
const pairs = new Map();
pairs.set('{', '}');
pairs.set('[', ']');
pairs.set('(', ')');
pairs.set('"', '"');
pairs.set("'", "'");
pairs.set('`', '`');
pairs.set('<', '>');
function activate(context) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        let { subscriptions } = context;
        const config = coc_nvim_1.workspace.getConfiguration('pairs');
        const disableLanguages = config.get('disableLanguages');
        const characters = config.get('enableCharacters');
        if (characters.length == 0)
            return;
        const { nvim } = coc_nvim_1.workspace;
        function insertPair(character) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                let bufnr = yield nvim.call('bufnr', '%');
                let doc = coc_nvim_1.workspace.getDocument(bufnr);
                if (!doc)
                    return character;
                let { filetype } = doc;
                if (disableLanguages.indexOf(filetype) !== -1)
                    return character;
                let pos = yield coc_nvim_1.workspace.getCursorPosition();
                let line = doc.getline(pos.line);
                let pre = line.slice(0, pos.character);
                let rest = line.slice(pos.character);
                let isQuote = ["'", '"', '`'].indexOf(character) !== -1;
                if (character == '<' && pre[pre.length - 1] == ' ') {
                    return character;
                }
                if (isQuote && rest[0] == character && rest[1] != character) {
                    // move position
                    nvim.command(`call feedkeys("\\<Right>", 'in')`, true);
                    return '';
                }
                if (isQuote && pre.length >= 2 && pre[pre.length - 1] == character && pre[pre.length - 2] == character) {
                    // allow triple quote
                    return character;
                }
                if (character == '"') {
                    nvim.command(`call feedkeys('""'."\\<Left>", 'in')`, true);
                }
                else {
                    nvim.command(`call feedkeys("${character}${pairs.get(character)}\\<Left>", 'in')`, true);
                }
                return '';
            });
        }
        function closePair(character) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                let bufnr = yield nvim.call('bufnr', '%');
                let doc = coc_nvim_1.workspace.getDocument(bufnr);
                if (!doc)
                    return character;
                if (disableLanguages.indexOf(doc.filetype) !== -1)
                    return character;
                let pos = yield coc_nvim_1.workspace.getCursorPosition();
                let line = doc.getline(pos.line);
                let rest = line.slice(pos.character);
                if (rest[0] == character) {
                    nvim.command(`call feedkeys("\\<Right>", 'in')`, true);
                    return '';
                }
                return character;
            });
        }
        nvim.pauseNotification();
        for (let character of characters) {
            if (pairs.has(character)) {
                subscriptions.push(coc_nvim_1.workspace.registerExprKeymap('i', character, insertPair.bind(null, character), false));
            }
            let matched = pairs.get(character);
            if (matched != character) {
                subscriptions.push(coc_nvim_1.workspace.registerExprKeymap('i', matched, closePair.bind(null, matched), false));
            }
        }
        nvim.resumeNotification();
    });
}
exports.activate = activate;
//# sourceMappingURL=index.js.map